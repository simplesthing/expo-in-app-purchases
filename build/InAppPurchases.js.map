{"version":3,"file":"InAppPurchases.js","sourceRoot":"","sources":["../src/InAppPurchases.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError, EventEmitter, Subscription } from '@unimodules/core';\nimport { Platform } from 'react-native';\n\nimport ExpoInAppPurchases from './ExpoInAppPurchases';\nimport {\n  IAPErrorCode,\n  IAPItemType,\n  IAPQueryResponse,\n  IAPResponseCode,\n  InAppPurchase,\n  InAppPurchaseState,\n  IAPItemDetails,\n} from './InAppPurchases.types';\n\nexport {\n  InAppPurchase,\n  InAppPurchaseState,\n  IAPResponseCode,\n  IAPErrorCode,\n  IAPItemType,\n  IAPQueryResponse,\n  IAPItemDetails,\n};\n\nconst errors = {\n  ALREADY_CONNECTED: 'Already connected to App Store',\n  ALREADY_DISCONNECTED: 'Already disconnected from App Store',\n  NOT_CONNECTED: 'Must be connected to App Store',\n};\n\nconst PURCHASES_UPDATED_EVENT = 'Expo.purchasesUpdated';\nconst eventEmitter = new EventEmitter(ExpoInAppPurchases);\n\nlet connected = false;\nlet purchaseUpdatedSubscription: Subscription;\n\nexport async function connectAsync(): Promise<void> {\n  if (connected) {\n    throw new ConnectionError(errors.ALREADY_CONNECTED);\n  }\n\n  await ExpoInAppPurchases.connectAsync();\n  connected = true;\n}\n\nexport async function getProductsAsync(itemList: string[]): Promise<IAPQueryResponse> {\n  if (!connected) {\n    throw new ConnectionError(errors.NOT_CONNECTED);\n  }\n\n  return await ExpoInAppPurchases.getProductsAsync(itemList);\n}\n\nexport async function getPurchaseHistoryAsync(refresh?: boolean): Promise<IAPQueryResponse> {\n  if (!connected) {\n    throw new ConnectionError(errors.NOT_CONNECTED);\n  }\n\n  return await ExpoInAppPurchases.getPurchaseHistoryAsync(refresh);\n}\n\nexport async function purchaseItemAsync(itemId: string, oldItem?: string): Promise<void> {\n  if (!connected) {\n    throw new ConnectionError(errors.NOT_CONNECTED);\n  }\n\n  await ExpoInAppPurchases.purchaseItemAsync(itemId, oldItem);\n}\n\nexport async function setPurchaseListener(callback: (result) => void): Promise<void> {\n  if (purchaseUpdatedSubscription) {\n    purchaseUpdatedSubscription.remove();\n  }\n\n  purchaseUpdatedSubscription = eventEmitter.addListener<IAPQueryResponse>(\n    PURCHASES_UPDATED_EVENT,\n    result => {\n      callback(result);\n    }\n  );\n}\n\nexport async function finishTransactionAsync(\n  purchase: InAppPurchase,\n  consumeItem: boolean\n): Promise<void> {\n  if (!connected) {\n    throw new ConnectionError(errors.NOT_CONNECTED);\n  }\n  if (purchase.acknowledged) return;\n\n  const transactionId = Platform.OS === 'android' ? purchase.purchaseToken : purchase.orderId;\n  await ExpoInAppPurchases.finishTransactionAsync(transactionId, consumeItem);\n}\n\nexport async function getBillingResponseCodeAsync(): Promise<number> {\n  if (!connected) {\n    return IAPResponseCode.ERROR;\n  }\n  if (!ExpoInAppPurchases.getBillingResponseCodeAsync) {\n    return IAPResponseCode.OK;\n  }\n\n  return await ExpoInAppPurchases.getBillingResponseCodeAsync();\n}\n\nexport async function disconnectAsync(): Promise<void> {\n  if (!connected) {\n    throw new ConnectionError(errors.ALREADY_DISCONNECTED);\n  }\n  await ExpoInAppPurchases.disconnectAsync();\n  connected = false;\n}\n\nclass ConnectionError extends CodedError {\n  constructor(message: string) {\n    super('ERR_IN_APP_PURCHASES_CONNECTION', message);\n  }\n}\n"]}